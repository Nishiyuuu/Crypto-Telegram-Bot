const TelegramBot = require('node-telegram-bot-api');
const messages = require('./messages');
const {
  setUserLang,
  getUserLang,
  setUserCoin,
  getUserCoin,
  getAll
} = require('../db/userStore');
const { getPrice: getBinancePrice } = require('../services/binanceService');
const axios = require('axios');

const token = process.env.TELEGRAM_TOKEN;
const bot = new TelegramBot(token, { polling: true });

const coins = ['BTC', 'ETH', 'XRP', 'SOL', 'DOGE'];

const { getPrice } = require('../services/binanceService');


// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
function getLangKeyboard() {
  return {
    reply_markup: {
      keyboard: [
        ['–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶', '–ë–µ–ª–∞—Ä—É—Å–∫–∞—è üáßüáæ'],
        ['–†—É—Å—Å–∫–∏–π üá∑üá∫', 'English üá¨üáß']
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    }
  };
}

// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
function getMainMenu(lang) {
  const labels = {
    uk: ['ü™ô –í–∏–±—Ä–∞—Ç–∏ –º–æ–Ω–µ—Ç—É', 'üí∞ –¶—ñ–Ω–∞ –º–æ–Ω–µ—Ç–∏', 'üåê –ú–æ–≤–∞', '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞'],
    ru: ['ü™ô –í—ã–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—É', 'üí∞ –¶–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã', 'üåê –Ø–∑—ã–∫', '‚ÑπÔ∏è –ü–æ–º–æ—â—å'],
    en: ['ü™ô Choose coin', 'üí∞ Coin price', 'üåê Language', '‚ÑπÔ∏è Help'],
    by: ['ü™ô –í—ã–±—Ä–∞—Ü—å –º–∞–Ω–µ—Ç—É', 'üí∞ –¶–∞–Ω–∞ –º–∞–Ω–µ—Ç—ã', 'üåê –ú–æ–≤–∞', '‚ÑπÔ∏è –î–∞–ø–∞–º–æ–≥–∞'],
  };
  return {
    reply_markup: {
      keyboard: [
        [labels[lang][0], labels[lang][1]],
        [labels[lang][2], labels[lang][3]],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    }
  };
}

// --- /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, messages['en'].chooseLang, getLangKeyboard());
});

// --- –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –í–∏–±—ñ—Ä –º–æ–≤–∏
  if (['–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶', '–ë–µ–ª–∞—Ä—É—Å–∫–∞—è üáßüáæ', '–†—É—Å—Å–∫–∏–π üá∑üá∫', 'English üá¨üáß'].includes(text)) {
    let lang = 'en';
    if (text.includes('–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞')) lang = 'uk';
    else if (text.includes('–ë–µ–ª–∞—Ä—É—Å–∫–∞—è')) lang = 'by';
    else if (text.includes('–†—É—Å—Å–∫–∏–π')) lang = 'ru';
    else if (text.includes('English')) lang = 'en';

    setUserLang(chatId, lang);
    return bot.sendMessage(chatId, messages[lang].description, getMainMenu(lang));
  }

  const lang = getUserLang(chatId);

  const labels = {
    chooseCoin: {
      uk: 'ü™ô –í–∏–±—Ä–∞—Ç–∏ –º–æ–Ω–µ—Ç—É', ru: 'ü™ô –í—ã–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—É',
      en: 'ü™ô Choose coin', by: 'ü™ô –í—ã–±—Ä–∞—Ü—å –º–∞–Ω–µ—Ç—É'
    },
    coinPrice: {
      uk: 'üí∞ –¶—ñ–Ω–∞ –º–æ–Ω–µ—Ç–∏', ru: 'üí∞ –¶–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã',
      en: 'üí∞ Coin price', by: 'üí∞ –¶–∞–Ω–∞ –º–∞–Ω–µ—Ç—ã'
    },
    language: {
      uk: 'üåê –ú–æ–≤–∞', ru: 'üåê –Ø–∑—ã–∫',
      en: 'üåê Language', by: 'üåê –ú–æ–≤–∞'
    },
    help: {
      uk: '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞', ru: '‚ÑπÔ∏è –ü–æ–º–æ—â—å',
      en: '‚ÑπÔ∏è Help', by: '‚ÑπÔ∏è –î–∞–ø–∞–º–æ–≥–∞'
    }
  };

  // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
  if (text === labels.chooseCoin[lang]) {
    const coinButtons = coins.map(c => [{ text: c }]);
    return bot.sendMessage(chatId, messages[lang].selectCoin, {
      reply_markup: {
        keyboard: coinButtons,
        one_time_keyboard: true,
        resize_keyboard: true,
      },
    });
  }

  if (coins.includes(text)) {
    setUserCoin(chatId, text);
    return bot.sendMessage(chatId, messages[lang].coinAdded(text), getMainMenu(lang));
  }

  if (text === labels.coinPrice[lang]) {
    const coin = getUserCoin(chatId);
    if (!coin) return bot.sendMessage(chatId, messages[lang].selectCoin);

    const price = await getPrice(coin);
    if (!price) return bot.sendMessage(chatId, "Price info not available. Try later.");

    return bot.sendMessage(chatId, messages[lang].currentPrice(coin, price.toFixed(2)), getMainMenu(lang));
  }

  if (text === labels.language[lang]) {
    return bot.sendMessage(chatId, messages[lang].chooseLang, getLangKeyboard());
  }

  if (text === labels.help[lang]) {
    return bot.sendMessage(chatId, messages[lang].help, getMainMenu(lang));
  }

  return bot.sendMessage(chatId, messages[lang].description, getMainMenu(lang));
});

// üîÅ –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Binance
const { startMonitoring } = require('../services/monitorService');
startMonitoring(bot);

console.log('Bot started');
