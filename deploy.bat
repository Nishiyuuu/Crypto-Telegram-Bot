@echo off
REM üöÄ Crypto Telegram Bot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –¥–ª—è Windows

setlocal enabledelayedexpansion

REM –ö–æ–ª—å–æ—Ä–∏ (–Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É cmd, –∞–ª–µ –ø—Ä–∞—Ü—é—é—Ç—å –≤ PowerShell)
set "GREEN=[32m"
set "RED=[31m"
set "YELLOW=[33m"
set "BLUE=[34m"
set "NC=[0m"

REM –õ–æ–≥—É–≤–∞–Ω–Ω—è
:log
echo %GREEN%[%date% %time%] %~1%NC%
goto :eof

:warn
echo %YELLOW%[%date% %time%] WARNING: %~1%NC%
goto :eof

:error
echo %RED%[%date% %time%] ERROR: %~1%NC%
exit /b 1

REM –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏
:check_system
call :log "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏..."

REM –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js
node --version >nul 2>&1
if errorlevel 1 (
    call :error "Node.js –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Node.js 18+ LTS –∑ https://nodejs.org/"
)

REM –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm
npm --version >nul 2>&1
if errorlevel 1 (
    call :error "npm –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
)

REM –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PM2
pm2 --version >nul 2>&1
if errorlevel 1 (
    call :log "–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ PM2..."
    npm install -g pm2
)

call :log "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ"
goto :eof

REM –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
:install_dependencies
call :log "–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ..."

if exist "package-lock.json" (
    npm ci --only=production
) else (
    npm install --only=production
)

call :log "‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
goto :eof

REM –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
:setup_config
call :log "–ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é..."

REM –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—É
if not exist ".env" (
    if exist "example.env" (
        copy example.env .env
        call :warn "–°—Ç–≤–æ—Ä–µ–Ω–æ .env —Ñ–∞–π–ª –∑ example.env. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è"
        echo.
        echo –†–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª:
        echo notepad .env
        echo.
        echo –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:
        echo - BOT_TOKEN=your_telegram_bot_token
        echo - MONGO_URI=your_mongodb_connection_string
        echo.
        pause
    ) else (
        call :error ".env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞ example.env –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
    )
)

REM –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
findstr /C:"BOT_TOKEN=" .env >nul
if errorlevel 1 (
    call :error "BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ"
)

findstr /C:"MONGO_URI=" .env >nul
if errorlevel 1 (
    call :error "MONGO_URI –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ"
)

REM –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–æ–∫
if not exist "src\logs" mkdir "src\logs"
if not exist "backup" mkdir "backup"
if not exist "scripts" mkdir "scripts"

call :log "‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
goto :eof

REM –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
:run_tests
call :log "–ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏..."

REM –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
if exist "package.json" (
    npm run test >nul 2>&1 || call :warn "–¢–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ –∞–±–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ"
)

REM –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ JSON —Ñ–∞–π–ª—ñ–≤
if exist "translate.json" (
    node -e "JSON.parse(require('fs').readFileSync('translate.json', 'utf8'))" || call :error "translate.json –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫–∏"
)

call :log "‚úÖ –¢–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
goto :eof

REM –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ
:deploy_production
call :log "–†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ..."

REM –ó—É–ø–∏–Ω–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
pm2 stop crypto-bot >nul 2>&1
pm2 stop crypto-worker >nul 2>&1
pm2 delete crypto-bot >nul 2>&1
pm2 delete crypto-worker >nul 2>&1

REM –ó–∞–ø—É—Å–∫ –∑ PM2
if exist "ecosystem.config.js" (
    pm2 start ecosystem.config.js
) else (
    pm2 start src/bot.js --name crypto-bot
    pm2 start src/worker.js --name crypto-worker
)

REM –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó PM2
pm2 save

call :log "‚úÖ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
goto :eof

REM –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
:setup_monitoring
call :log "–ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥..."

REM –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è PM2 –ø–ª–∞–≥—ñ–Ω—ñ–≤
pm2 install pm2-logrotate
pm2 set pm2-logrotate:max_size 10M
pm2 set pm2-logrotate:retain 30
pm2 set pm2-logrotate:compress true

REM –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ health check
(
echo const axios = require('axios'^);
echo const fs = require('fs'^);
echo.
echo async function healthCheck(^) {
echo     const results = [];
echo.    
echo     // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram API
echo     try {
echo         const response = await axios.get(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/getMe`^);
echo         results.push({ service: 'Telegram', status: 'OK' }^);
echo     } catch (error^) {
echo         results.push({ service: 'Telegram', status: 'ERROR', error: error.message }^);
echo     }
echo.    
echo     console.log(JSON.stringify(results, null, 2^)^);
echo     fs.writeFileSync('health-check.json', JSON.stringify(results, null, 2^)^);
echo.    
echo     return results.every(r =^> r.status === 'OK'^);
echo }
echo.
echo healthCheck(^).then(success =^> {
echo     process.exit(success ? 0 : 1^);
echo }^).catch(error =^> {
echo     console.error('Health check failed:', error^);
echo     process.exit(1^);
echo }^);
) > scripts\health-check.js

call :log "‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
goto :eof

REM –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup —Å–∫—Ä–∏–ø—Ç–∞
:setup_backup
call :log "–ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ backup..."

(
echo @echo off
echo set DATE=%%date:~-4,4%%%%date:~-10,2%%%%date:~-7,2%%_%%time:~0,2%%%%time:~3,2%%%%time:~6,2%%
echo set DATE=%%DATE: =0%%
echo set BACKUP_DIR=backup
echo set DB_NAME=crypto_bot
echo.
echo if not exist %%BACKUP_DIR%% mkdir %%BACKUP_DIR%%
echo.
echo echo Backup configuration...
echo copy .env %%BACKUP_DIR%%\env_backup_%%DATE%%
echo copy package.json %%BACKUP_DIR%%\package_backup_%%DATE%%
echo.
echo echo Backup logs...
echo if exist src\logs (
echo     xcopy /E /I src\logs %%BACKUP_DIR%%\logs_%%DATE%%
echo ^)
echo.
echo echo Backup completed: %%DATE%%
) > scripts\backup.bat

call :log "‚úÖ Backup –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
goto :eof

REM –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
:main
echo.
echo %BLUE%üöÄ Crypto Telegram Bot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è%NC%
echo %BLUE%==================================================%NC%
echo.

set "action=%~1"
if "%action%"=="" set "action=deploy"

if "%action%"=="install" (
    call :check_system
    call :install_dependencies
    call :setup_config
) else if "%action%"=="test" (
    call :run_tests
) else if "%action%"=="deploy" (
    call :check_system
    call :install_dependencies
    call :setup_config
    call :run_tests
    call :deploy_production
    call :setup_monitoring
    call :setup_backup
) else if "%action%"=="monitoring" (
    call :setup_monitoring
) else if "%action%"=="backup" (
    call :setup_backup
) else if "%action%"=="health" (
    node scripts\health-check.js
) else (
    echo –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: %0 [install^|test^|deploy^|monitoring^|backup^|health]
    echo.
    echo –ö–æ–º–∞–Ω–¥–∏:
    echo   install    - –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    echo   test       - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    echo   deploy     - –ü–æ–≤–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º^)
    echo   monitoring - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    echo   backup     - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è backup
    echo   health     - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏
    exit /b 1
)

call :log "üéâ –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!"

if "%action%"=="deploy" (
    echo.
    echo %GREEN%–í–∞—à Crypto Telegram Bot —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ!%NC%
    echo.
    echo –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
    echo   pm2 status          - –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—ñ–≤
    echo   pm2 logs crypto-bot - –õ–æ–≥–∏ –±–æ—Ç–∞
    echo   pm2 monit           - –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
    echo   scripts\backup.bat  - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup
    echo   node scripts\health-check.js - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è
    echo.
    echo –õ–æ–≥–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤: src\logs\
    echo –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è PM2: ecosystem.config.js
)

goto :eof

REM –í–∏–∫–ª–∏–∫ –≥–æ–ª–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
call :main %*
