const { Telegraf, session, Scenes } = require('telegraf');
const { BOT_TOKEN } = require('../config/env');
const logger = require('../utils/logger');
const User = require('../db/models/user');
const { handlePriceCommand } = require('./commands/price');

// --- Text translations (hardcoded for now, will be from language.json) ---
const texts = {
    "start_message": {
        "en": "Hello! I‚Äôm a crypto monitoring bot.",
        "ua": "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.",
        "ru": "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."
    },
    "select_language": {
        "en": "Please select a language:",
        "ua": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
    },
    "language_selected_notification": {
        "en": "Language set to English",
        "ua": "–ú–æ–≤—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É",
        "ru": "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
    },
    "menu_main": {
        "en": "üìã Main Menu",
        "ua": "üìã –ì–æ–ª–æ–≤–Ω–µ –ú–µ–Ω—é",
        "ru": "üìã –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é"
    },
    "menu_buttons": {
        "price": {
            "en": "üí∞ Price",
            "ua": "üí∞ –¶—ñ–Ω–∞",
            "ru": "üí∞ –¶–µ–Ω–∞"
        },
        "settings": {
            "en": "‚öôÔ∏è Setting",
            "ua": "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
            "ru": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        },
        "help": {
            "en": "‚ùì Help",
            "ua": "‚ùì –î–æ–ø–æ–º–æ–≥–∞",
            "ru": "‚ùì –ü–æ–º–æ—â—å"
        }
    },
    "price_enter_symbol": {
        "en": "Please enter the coin symbol (e.g., BTC):",
        "ua": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BTC):",
        "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC):"
        // –î–æ–¥–∞–π—Ç–µ "by" —è–∫—â–æ –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ –±—ñ–ª–æ—Ä—É—Å—å–∫—É
    },
    "price_response": { // <--- –ü–ï–†–ï–í–Ü–†–¢–ï –¶–ï–ô –ö–õ–Æ–ß
        "en": "Price of {symbol}: {price}",
        "ua": "–¶—ñ–Ω–∞ {symbol}: {price}",
        "ru": "–¶–µ–Ω–∞ {symbol}: {price}"
        // –î–æ–¥–∞–π—Ç–µ "by" —è–∫—â–æ –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ –±—ñ–ª–æ—Ä—É—Å—å–∫—É
    },
    "price_not_found": {
        "en": "Could not find price for {symbol}. Please check the symbol.",
        "ua": "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {symbol}. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–∏–º–≤–æ–ª.",
        "ru": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É –¥–ª—è {symbol}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª."
        // –î–æ–¥–∞–π—Ç–µ "by" —è–∫—â–æ –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ –±—ñ–ª–æ—Ä—É—Å—å–∫—É
    },
    "general_error": { // –î–æ–¥–∞–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–º–∏–ª–æ–∫
        "en": "An unexpected error occurred. Please try again later.",
        "ua": "–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
        "ru": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    },
    "invalid_input": { // –î–æ–¥–∞–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ–≤—ñ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥—É
        "en": "Invalid input. Please enter a valid coin symbol.",
        "ua": "–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–≤—ñ–¥. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏.",
        "ru": "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã."
    }
};

// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// --- Middlewares ---
// 1. Session middleware (–ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø–µ—Ä—à–∏–º)
bot.use(session());

// 2. Custom i18n middleware - –í–ê–ñ–õ–ò–í–Ü –ó–ú–Ü–ù–ò –¢–£–¢!
bot.use(async (ctx, next) => {
    ctx.session = ctx.session || {}; 

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ ctx.session.language, —è–∫—â–æ –≤–æ–Ω–∞ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if (!ctx.session.language && ctx.from && ctx.from.id) {
        const user = await User.findOne({ userId: ctx.from.id });
        if (user && user.language) {
            ctx.session.language = user.language;
        } else {
            ctx.session.language = 'en'; // –î–µ—Ñ–æ–ª—Ç –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        }
    } else if (!ctx.session.language) { // Fallback, —è–∫—â–æ –Ω–µ–º–∞—î ctx.from.id
        ctx.session.language = 'en';
    }
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ ctx.i18n —Ç–∞–∫, —â–æ–± –≤—ñ–Ω –î–ò–ù–ê–ú–Ü–ß–ù–û —á–∏—Ç–∞–≤ ctx.session.language
    ctx.i18n = (key, replacements = {}) => {
        const dynamicLang = ctx.session.language || 'en'; // –ó–ê–í–ñ–î–ò –ß–ò–¢–ê–Ñ–ú–û –ó–ù–ê–ß–ï–ù–ù–Ø –ó –°–ï–°–Ü–á –ü–†–ò –í–ò–ö–õ–ò–ö–£

        let text = texts[key]?.[dynamicLang] || texts[key]?.['en'];

        if (text === undefined) {
            logger.warn(`Missing translation for key: "${key}" in lang: "${dynamicLang}". Falling back to "en".`);
            text = `TEXT_NOT_FOUND: ${key}`; 
        }
        
        for (const [k, v] of Object.entries(replacements)) {
            text = text.replace(`{${k}}`, v);
        }
        return text;
    };
    return next();
});


// --- Keyboards (–º–µ–Ω—é) ---
const getMainMenu = (langCode) => {
    const currentLangCode = langCode || 'en'; 
    const priceText = texts.menu_buttons.price?.[currentLangCode] || texts.menu_buttons.price?.['en'];
    const settingsText = texts.menu_buttons.settings?.[currentLangCode] || texts.menu_buttons.settings?.['en'];
    const helpText = texts.menu_buttons.help?.[currentLangCode] || texts.menu_buttons.help?.['en'];

    return {
        reply_markup: {
            keyboard: [
                [{ text: priceText }, { text: settingsText }],
                [{ text: helpText }]
            ],
            resize_keyboard: true
        }
    };
};

const getLanguageMenu = () => {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üá¨üáß EN', callback_data: 'lang_en' }],
                [{ text: 'üá∫üá¶ UA', callback_data: 'lang_ua' }],
                [{ text: 'üá∑üá∫ RU', callback_data: 'lang_ru' }],
                [{ text: 'üáßüáæ BY', callback_data: 'lang_by' }]
            ]
        }
    };
};


// --- –ö–æ–º–∞–Ω–¥–∏ ---
// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
bot.start(async (ctx) => {
    logger.info(`Received /start command from user ${ctx.from.id}`);
    const userId = ctx.from.id;

    let user = await User.findOne({ userId });

    if (!user) {
        // –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:
        user = new User({ userId }); 
        await user.save();
        logger.info(`New user ${userId} registered.`);

        // 1. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–µ—Ä—à–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è (–±–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏)
        await ctx.reply(ctx.i18n('start_message')); // –¶–µ –±—É–¥–µ Hello! I'm a crypto monitoring bot.
        
        // 2. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –ó inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        await ctx.reply(ctx.i18n('select_language'), getLanguageMenu()); // –¶–µ –±—É–¥–µ Please select a language:
    } else {
        // –Ü—Å–Ω—É—é—á–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:
        logger.info(`Existing user ${userId} started bot.`);
        // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ, —â–æ —Å–µ—Å—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º i18n
        ctx.session.language = user.language; 

        await ctx.reply(ctx.i18n('start_message')); 
        await ctx.reply(ctx.i18n('menu_main'), getMainMenu(user.language));
    }
});

// –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º–æ–≤–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É - –í–ê–ñ–õ–ò–í–Ü –ó–ú–Ü–ù–ò –¢–£–¢!
bot.action(/^lang_([a-z]{2})$/, async (ctx) => {
    const langCode = ctx.match[1];
    const userId = ctx.from.id;

    try {
        const user = await User.findOneAndUpdate(
            { userId },
            { language: langCode },
            { new: true, upsert: true }
        );

        ctx.session.language = langCode; // –û–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É –≤ —Å–µ—Å—ñ—ó –Ω–µ–≥–∞–π–Ω–æ

        logger.info(`User ${userId} set language to ${langCode}`);

        // --- –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –º—ñ—Å—Ç–∏–ª–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–±—ñ—Ä –º–æ–≤–∏ —Ç–∞ inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É ---
        // –¶–µ —É—Å—É–Ω–µ –ø—Ä–æ–±–ª–µ–º—É –¥—É–±–ª—é–≤–∞–Ω–Ω—è "Hello!"
        if (ctx.callbackQuery && ctx.callbackQuery.message) {
            try {
                const messageToDeleteId = ctx.callbackQuery.message.message_id;
                await ctx.telegram.deleteMessage(ctx.chat.id, messageToDeleteId);
                logger.info(`Deleted language selection message for user ${userId}.`);
            } catch (deleteError) {
                // –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É, –∞–ª–µ –Ω–µ –ø–∞–¥–∞—î–º–æ, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏
                logger.error(`Error deleting language selection message for user ${userId}:`, deleteError.message);
            }
        }
        
        // --- –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥–æ–ª–æ–≤–Ω–∏–º –º–µ–Ω—é ---
        // –¶–µ–π –≤–∏–∫–ª–∏–∫ ctx.i18n('menu_main') —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î –∞–∫—Ç—É–∞–ª—å–Ω—É –º–æ–≤—É –∑ ctx.session.language
        await ctx.reply(
            ctx.i18n('menu_main'),
            getMainMenu(langCode)
        );

        // --- –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback query ---
        try {
            await ctx.answerCbQuery(ctx.i18n('language_selected_notification', { lang: langCode })); 
        } catch (answerError) {
            logger.warn(`Could not answer callback query for user ${userId}:`, answerError.message);
        }

    } catch (error) {
        logger.error(`Unhandled error in language action for user ${userId}:`, error);
        await ctx.reply('An error occurred while setting your language. Please try again.');
    }
});

bot.command('price', handlePriceCommand); // <--- –¶–ï–ô –†–Ø–î–û–ö!

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí∞ –¶—ñ–Ω–∞" —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é
// –¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∑ —Ç–µ–∫—Å—Ç–æ–º "üí∞ –¶—ñ–Ω–∞" (–≤ –±—É–¥—å-—è–∫—ñ–π –º–æ–≤—ñ)
bot.hears((text, ctx) => {
    const priceButtonTexts = Object.values(texts.menu_buttons.price);
    const userText = text.trim(); 
    return priceButtonTexts.some(btnText => btnText.trim() === userText);
}, async (ctx) => { 
    ctx.session.awaitingCoinSymbol = true; 
    await ctx.reply(ctx.i18n('price_enter_symbol')); 
    logger.info(`User ${ctx.from.id} is now awaiting coin symbol input.`);
});

bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±–æ—Ç –æ—á—ñ–∫—É—î –≤–≤–µ–¥–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É –º–æ–Ω–µ—Ç–∏ –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (ctx.session.awaitingCoinSymbol) {
        const symbol = ctx.message.text.trim().toUpperCase();
        
        // –î–æ–¥–∞–º–æ –ø—Ä–æ—Å—Ç—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—é: —á–∏ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è —Å–∏–º–≤–æ–ª —Ç—ñ–ª—å–∫–∏ –∑ –ª—ñ—Ç–µ—Ä
        if (!/^[A-Z]+$/.test(symbol)) {
            await ctx.reply(ctx.i18n('invalid_input'));
            // –ú–∏ –Ω–µ —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω awaitingCoinSymbol —Ç—É—Ç, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ –≤–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª –∑–Ω–æ–≤—É.
            return;
        }

        // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, –æ—Å–∫—ñ–ª—å–∫–∏ —Å–∏–º–≤–æ–ª –æ—Ç—Ä–∏–º–∞–Ω–æ
        ctx.session.awaitingCoinSymbol = false; 
        logger.info(`User ${userId} entered symbol: ${symbol}. Awaiting state cleared.`);

        // –í–ò–ö–õ–ò–ö–ê–Ñ–ú–û handlePriceCommand, –ü–ï–†–ï–î–ê–Æ–ß–ò ctx –Ü –°–ò–ú–í–û–õ –û–ö–†–ï–ú–û
        await handlePriceCommand(ctx, symbol); // <--- –í–ê–ñ–õ–ò–í–ê –ó–ú–Ü–ù–ê –¢–£–¢!

    } else {
        // –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ –±—É–¥—å-—è–∫–µ —ñ–Ω—à–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –Ω–µ —î –∫–æ–º–∞–Ω–¥–æ—é
        // —ñ –±–æ—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ –æ—á—ñ–∫—É—î, –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∞–±–æ –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏.
        // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º Telegraf –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î, —â–æ —î –û–ö.
        // –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ–±—Ä–æ–±–∏—Ç–∏ –Ω–µ–≤—ñ–¥–æ–º—ñ –∫–æ–º–∞–Ω–¥–∏, —Ü–µ –º—ñ—Å—Ü–µ –¥–ª—è —Ü—å–æ–≥–æ:
        // await ctx.reply(ctx.i18n('unknown_command')); 
    }
});

module.exports = bot;