// src/bot/commands/price.js

const logger = require('../../utils/logger');
const { getPrice } = require('../../services/binance'); 

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ "–¶—ñ–Ω–∞"
// –¢–µ–ø–µ—Ä –ø—Ä–∏–π–º–∞—î —Å–∏–º–≤–æ–ª —è–∫ –æ–∫—Ä–µ–º–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
const handlePriceCommand = async (ctx, symbolInput) => { // <--- –ó–ú–Ü–ù–ê –¢–£–¢: –î–û–î–ê–ù–û symbolInput
    const userId = ctx.from.id; // ctx.from.id —Ç–µ–ø–µ—Ä –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, –±–æ ctx - —Å–ø—Ä–∞–≤–∂–Ω—ñ–π
    const userLang = ctx.session.language; 

    let symbol = '';

    // –Ø–∫—â–æ —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–¥–∞–Ω–æ —è–≤–Ω–æ (–∑ bot.on('text')), –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
    if (symbolInput) {
        symbol = symbolInput.toUpperCase();
    } 
    // –Ø–∫—â–æ —Å–∏–º–≤–æ–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —è–≤–Ω–æ, —à—É–∫–∞—î–º–æ –π–æ–≥–æ –≤ —Ç–µ–∫—Å—Ç—ñ –∫–æ–º–∞–Ω–¥–∏ (–¥–ª—è /price BTC)
    else if (ctx.message && ctx.message.text) {
        const textParts = ctx.message.text.split(' ');
        if (textParts.length > 1) { // –¶–µ –¥–ª—è –≤–∏–ø–∞–¥–∫—É /price BTC
            symbol = textParts[1].toUpperCase(); 
        }
    } 
    
    // –Ø–∫—â–æ —Å–∏–º–≤–æ–ª –≤—Å–µ —â–µ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É "–¶—ñ–Ω–∞" —ñ –º–∏ —á–µ–∫–∞—î–º–æ –≤–≤—ñ–¥)
    if (!symbol) {
        // –ú–∏ –ù–ï –±—É–¥–µ–º–æ —Ç—É—Ç –ø—Ä–æ—Å–∏—Ç–∏ –≤–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª, –±–æ —Ü–µ–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –æ–±—Ä–æ–±–ª—è—î bot.hears –¥–ª—è "üí∞ –¶—ñ–Ω–∞"
        // handlePriceCommand –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ —Å–∏–º–≤–æ–ª –≤–∂–µ –º–∞—î –±—É—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∞–±–æ –∑–∞–ø—Ä–æ—à–µ–Ω–∏–π.
        // –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ —Å—é–¥–∏ –º–∏ –ø–æ—Ç—Ä–∞–ø–∏–º–æ, –ª–∏—à–µ —è–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.
        logger.warn(`handlePriceCommand called without a symbol for user ${userId}. This should not happen.`);
        await ctx.reply(ctx.i18n('general_error')); 
        return; 
    }

    const price = await getPrice(symbol); 

    if (price !== null) {
        const formattedPrice = new Intl.NumberFormat(userLang === 'ua' ? 'uk-UA' : 'en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 2,
            maximumFractionDigits: 8 
        }).format(price);

        await ctx.reply(ctx.i18n('price_response', { symbol: symbol, price: formattedPrice })); 
    } else {
        await ctx.reply(ctx.i18n('price_not_found', { symbol: symbol })); 
    }
};

module.exports = {
    handlePriceCommand
};