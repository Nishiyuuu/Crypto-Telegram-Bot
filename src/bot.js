require('dotenv').config();
const fs = require('fs');
const path = require('path');
const mongoose = require('mongoose');
const TelegramBot = require('node-telegram-bot-api');
const User = require('./models/User');
const logger = require('./utils/logger');

const t = require('./translate');

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ env
if (!process.env.BOT_TOKEN || !process.env.MONGO_URI) {
  logger.error('–ù–µ –∑–∞–¥–∞–Ω—ñ BOT_TOKEN –∞–±–æ MONGO_URI —É .env');
  throw new Error('–ù–µ –∑–∞–¥–∞–Ω—ñ BOT_TOKEN –∞–±–æ MONGO_URI —É .env');
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const pidFile = path.join(__dirname, '..', '.bot.pid');
if (fs.existsSync(pidFile)) {
  const existingPid = fs.readFileSync(pidFile, 'utf8').trim();
  logger.warn(`‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ PID —Ñ–∞–π–ª –∑ –ø—Ä–æ—Ü–µ—Å–æ–º ${existingPid}`);
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–æ—Ü–µ—Å –¥—ñ–π—Å–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π
    process.kill(existingPid, 0);
    logger.error('‚ùå –ë–æ—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π! –ó—É–ø–∏–Ω—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–∞–Ω–¥–æ—é: npm run stop');
    process.exit(1);
  } catch (err) {
    // –ü—Ä–æ—Ü–µ—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π, –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π PID —Ñ–∞–π–ª
    logger.info('üßπ –í–∏–¥–∞–ª—è—é –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π PID —Ñ–∞–π–ª');
    fs.unlinkSync(pidFile);
  }
}

const bot = new TelegramBot(process.env.BOT_TOKEN, { 
  polling: {
    interval: 1000,
    autoStart: false
  }
});

// –ó–∞–ø–∏—Å—É—î–º–æ PID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
fs.writeFileSync(pidFile, process.pid.toString());
logger.info(`üìù –ó–∞–ø–∏—Å–∞–Ω–æ PID ${process.pid} –≤ —Ñ–∞–π–ª ${pidFile}`);

// –ó–∞–ø—É—Å–∫–∞—î–º–æ polling –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
setTimeout(() => {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ Telegram polling...');
  bot.startPolling();
}, 2000);

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –±–æ—Ç–∞
bot.on('error', (error) => {
  logger.error('Telegram bot error:', error);
});

bot.on('polling_error', (error) => {
  logger.error('Polling error:', error);
  
  // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É (409)
  if (error.code === 'ETELEGRAM' && error.response && error.response.statusCode === 409) {
    logger.error('‚ùå –ö–û–ù–§–õ–Ü–ö–¢: –Ü–Ω—à–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!');
    logger.error('üõë –ó—É–ø–∏–Ω—è—é –ø–æ—Ç–æ—á–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Ç–∞ –≤–∏–¥–∞–ª—è—é PID —Ñ–∞–π–ª...');
    
    // –í–∏–¥–∞–ª—è—î–º–æ PID —Ñ–∞–π–ª –ø—Ä–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ
    const pidFile = path.join(__dirname, '..', '.bot.pid');
    if (fs.existsSync(pidFile)) {
      fs.unlinkSync(pidFile);
      logger.info('üßπ PID —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ');
    }
    
    // –ó—É–ø–∏–Ω—è—î–º–æ polling –ø–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º
    bot.stopPolling();
    setTimeout(() => process.exit(1), 1000);
    return;
  }
  
  // –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ - –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø—É—Å–∫ polling —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    logger.info('üîÑ –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è polling...');
    bot.startPolling();
  }, 5000);
});

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => {
    logger.info('‚úÖ MongoDB connected');
  })
  .catch(err => {
    logger.error('‚ùå MongoDB error:', err);
    process.exit(1);
  });

// –î–∏–Ω–∞–º—ñ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
const handlersDir = path.join(__dirname, 'handlers');
fs.readdirSync(handlersDir).forEach(file => {
  if (file.endsWith('.js')) {
    try {
      require(path.join(handlersDir, file))(bot);
      logger.info(`‚úÖ Handler loaded: ${file}`);
    } catch (error) {
      logger.error(`‚ùå Error loading handler ${file}:`, error);
    }
  }
});


// /start ‚Äî –ª–∏—à–µ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  logger.info(`New user started bot: ${userId} (${msg.from.username || 'no username'})`);
  
  try {
    let user = await User.findOne({ telegramId: chatId });
    if (!user) {
      user = new User({ telegramId: chatId });
      await user.save();
      logger.info(`New user created: ${userId}`);
    }

    const langs = ['uk', 'ru', 'be', 'en'];
    const keyboard = langs.map(code => [{
      text: t(code, 'language_name'),
      callback_data: `lang:${code}`
    }]);

    await bot.sendMessage(chatId, t(user.language, 'choose_language'), {
      reply_markup: { inline_keyboard: keyboard }
    });
  } catch (error) {
    logger.error(`Error in /start command for user ${userId}:`, error);
    await bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–æ—Ü–µ—Å—É
process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
  process.exit(1);
});

// Graceful shutdown
process.on('SIGINT', () => {
  logger.info('Bot shutting down...');
  
  // –í–∏–¥–∞–ª—è—î–º–æ PID —Ñ–∞–π–ª
  const pidFile = path.join(__dirname, '..', '.bot.pid');
  if (fs.existsSync(pidFile)) {
    fs.unlinkSync(pidFile);
    logger.info('üßπ PID —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ');
  }
  
  bot.stopPolling();
  mongoose.connection.close();
  process.exit(0);
});

process.on('SIGTERM', () => {
  logger.info('Bot terminated...');
  
  // –í–∏–¥–∞–ª—è—î–º–æ PID —Ñ–∞–π–ª
  const pidFile = path.join(__dirname, '..', '.bot.pid');
  if (fs.existsSync(pidFile)) {
    fs.unlinkSync(pidFile);
    logger.info('üßπ PID —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ');
  }
  
  bot.stopPolling();
  mongoose.connection.close();
  process.exit(0);
});

module.exports = bot;
