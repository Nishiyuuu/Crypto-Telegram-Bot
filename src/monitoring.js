
require('dotenv').config();
const Binance = require('binance-api-node').default;
const Monitoring = require('./models/Monitoring');

const client = Binance();

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–º—ñ–Ω–∏ —Ü—ñ–Ω –º–æ–Ω–µ—Ç
 * @param {Array<string>} coins - –º–∞—Å–∏–≤ –º–æ–Ω–µ—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ['BTCUSDT', 'ETHUSDT']
 * @param {number} interval - —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {number} percentThreshold - –≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–º—ñ–Ω–∏ –¥–ª—è —Ç—Ä–∏–≥–µ—Ä–∞ –∞–ª–µ—Ä—Ç—É
 * @returns {Promise<Array<string>>} - –º–∞—Å–∏–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∞–ª–µ—Ä—Ç—É
 */


async function monitorPrices(coins, interval, percentThreshold) {
  const alerts = [];

  for (const symbol of coins) {
    const ticker = await client.prices({ symbol });
    const currentPrice = parseFloat(ticker[symbol]);

    // –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É –∑ –∫–µ—à—É –∞–±–æ –ë–î. –ú–∏ –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Monitoring —è–∫ –ª–æ–≥–≥–µ—Ä.
    const lastEntry = await Monitoring.findOne({ symbol }).sort({ createdAt: -1 });

    if (!lastEntry) {
      await Monitoring.create({
        symbol,
        interval,
        startPrice: currentPrice,
        endPrice: currentPrice,
        percentChange: 0,
      });
      continue;
    }

    const percentChange = ((currentPrice - lastEntry.endPrice) / lastEntry.endPrice) * 100;

    if (Math.abs(percentChange) >= percentThreshold) {
      alerts.push(`üö® ${symbol} –∑–º—ñ–Ω–∏–ª–∞—Å—å –Ω–∞ ${percentChange.toFixed(2)}%\n${lastEntry.endPrice} ‚Üí ${currentPrice}`);

      await Monitoring.create({
        symbol,
        interval,
        startPrice: lastEntry.endPrice,
        endPrice: currentPrice,
        percentChange,
      });
    }
  }

  return alerts;
}

module.exports = monitorPrices;