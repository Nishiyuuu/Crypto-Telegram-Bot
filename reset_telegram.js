#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è webhook —Ç–∞ getUpdates –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
require('dotenv').config();
const https = require('https');

const BOT_TOKEN = process.env.BOT_TOKEN;

if (!BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ');
  process.exit(1);
}

console.log('üßπ –û—á–∏—â–µ–Ω–Ω—è Telegram webhook —Ç–∞ reset getUpdates...');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è webhook
function clearWebhook() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.telegram.org',
      port: 443,
      path: `/bot${BOT_TOKEN}/deleteWebhook`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          if (result.ok) {
            console.log('‚úÖ Webhook —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ');
            resolve(result);
          } else {
            console.log('‚ö†Ô∏è Webhook –æ—á–∏—â–µ–Ω–Ω—è:', result.description);
            resolve(result);
          }
        } catch (e) {
          reject(e);
        }
      });
    });

    req.on('error', (e) => {
      reject(e);
    });

    req.end();
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è bot info (—Ç–∞–∫–æ–∂ reset getUpdates)
function getBotInfo() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.telegram.org',
      port: 443,
      path: `/bot${BOT_TOKEN}/getMe`,
      method: 'GET'
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          if (result.ok) {
            console.log(`‚úÖ Bot –∞–∫—Ç–∏–≤–Ω–∏–π: @${result.result.username}`);
            resolve(result);
          } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞:', result.description);
            reject(new Error(result.description));
          }
        } catch (e) {
          reject(e);
        }
      });
    });

    req.on('error', (e) => {
      reject(e);
    });

    req.end();
  });
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function resetBot() {
  try {
    await clearWebhook();
    await new Promise(resolve => setTimeout(resolve, 1000)); // –ó–∞—Ç—Ä–∏–º–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
    await getBotInfo();
    console.log('üéâ Telegram API —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ –≤—ñ–¥ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤!');
    console.log('üí° –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –±–µ–∑–ø–µ—á–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –±–æ—Ç–∞: npm run prod');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—á–∏—â–µ–Ω–Ω—è:', error.message);
    process.exit(1);
  }
}

resetBot();
