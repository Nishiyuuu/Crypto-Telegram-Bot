#!/bin/bash
# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è Crypto Telegram Bot

set -e

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏
check_system() {
    log "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js
    if ! command -v node &> /dev/null; then
        error "Node.js –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Node.js 18+ LTS"
    fi
    
    NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -lt 18 ]; then
        error "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –≤–µ—Ä—Å—ñ—è Node.js 18+. –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: $(node --version)"
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm
    if ! command -v npm &> /dev/null; then
        error "npm –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ MongoDB
    if ! command -v mongod &> /dev/null; then
        warn "MongoDB –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ MongoDB Atlas –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PM2
    if ! command -v pm2 &> /dev/null; then
        log "–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ PM2..."
        npm install -g pm2
    fi
    
    log "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ"
}

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
install_dependencies() {
    log "–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ..."
    
    if [ -f "package-lock.json" ]; then
        npm ci --only=production
    else
        npm install --only=production
    fi
    
    log "‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
}

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
setup_config() {
    log "–ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—É
    if [ ! -f ".env" ]; then
        if [ -f "example.env" ]; then
            cp example.env .env
            warn "–°—Ç–≤–æ—Ä–µ–Ω–æ .env —Ñ–∞–π–ª –∑ example.env. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è"
            echo "–†–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª:"
            echo "nano .env"
            echo ""
            echo "–û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:"
            echo "- BOT_TOKEN=your_telegram_bot_token"
            echo "- MONGO_URI=your_mongodb_connection_string"
            echo ""
            read -p "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è .env —Ñ–∞–π–ª—É..."
        else
            error ".env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞ example.env –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
        fi
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    if ! grep -q "BOT_TOKEN=" .env || ! grep -q "MONGO_URI=" .env; then
        error "–û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ BOT_TOKEN —Ç–∞ MONGO_URI –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –≤ .env"
    fi
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–æ–∫
    mkdir -p src/logs
    mkdir -p backup
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤
    chmod 600 .env
    
    log "‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
}

# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
run_tests() {
    log "–ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
    if [ -f "package.json" ]; then
        npm run test 2>/dev/null || warn "–¢–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ –∞–±–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ"
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ JSON —Ñ–∞–π–ª—ñ–≤
    if [ -f "translate.json" ]; then
        node -e "JSON.parse(require('fs').readFileSync('translate.json', 'utf8'))" || error "translate.json –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫–∏"
    fi
    
    log "‚úÖ –¢–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ
deploy_production() {
    log "–†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ..."
    
    # –ó—É–ø–∏–Ω–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
    pm2 stop crypto-bot 2>/dev/null || true
    pm2 stop crypto-worker 2>/dev/null || true
    pm2 delete crypto-bot 2>/dev/null || true
    pm2 delete crypto-worker 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫ –∑ PM2
    if [ -f "ecosystem.config.js" ]; then
        pm2 start ecosystem.config.js
    else
        pm2 start src/bot.js --name crypto-bot
        pm2 start src/worker.js --name crypto-worker
    fi
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó PM2
    pm2 save
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫—É
    pm2 startup systemd -u $(whoami) --hp $(pwd) || warn "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫"
    
    log "‚úÖ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
setup_monitoring() {
    log "–ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥..."
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è PM2 –ø–ª–∞–≥—ñ–Ω—ñ–≤
    pm2 install pm2-logrotate
    pm2 set pm2-logrotate:max_size 10M
    pm2 set pm2-logrotate:retain 30
    pm2 set pm2-logrotate:compress true
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ health check
    cat > scripts/health-check.js << 'EOF'
const axios = require('axios');
const fs = require('fs');

async function healthCheck() {
    const results = [];
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram API
    try {
        const response = await axios.get(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/getMe`);
        results.push({ service: 'Telegram', status: 'OK', latency: response.duration });
    } catch (error) {
        results.push({ service: 'Telegram', status: 'ERROR', error: error.message });
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    try {
        const mongoose = require('mongoose');
        const isConnected = mongoose.connection.readyState === 1;
        results.push({ service: 'MongoDB', status: isConnected ? 'OK' : 'ERROR' });
    } catch (error) {
        results.push({ service: 'MongoDB', status: 'ERROR', error: error.message });
    }
    
    console.log(JSON.stringify(results, null, 2));
    
    // –ó–∞–ø–∏—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    fs.writeFileSync('health-check.json', JSON.stringify(results, null, 2));
    
    return results.every(r => r.status === 'OK');
}

healthCheck().then(success => {
    process.exit(success ? 0 : 1);
}).catch(error => {
    console.error('Health check failed:', error);
    process.exit(1);
});
EOF
    
    mkdir -p scripts
    chmod +x scripts/health-check.js
    
    log "‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup —Å–∫—Ä–∏–ø—Ç–∞
setup_backup() {
    log "–ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ backup..."
    
    cat > scripts/backup.sh << 'EOF'
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="backup"
DB_NAME="crypto_bot"

mkdir -p $BACKUP_DIR

# MongoDB backup
if command -v mongodump &> /dev/null; then
    mongodump --db $DB_NAME --out $BACKUP_DIR/$DATE
    tar -czf $BACKUP_DIR/backup_$DATE.tar.gz $BACKUP_DIR/$DATE
    rm -rf $BACKUP_DIR/$DATE
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö backup (30 –¥–Ω—ñ–≤)
    find $BACKUP_DIR -name "backup_*.tar.gz" -mtime +30 -delete
    
    echo "MongoDB backup completed: backup_$DATE.tar.gz"
else
    echo "mongodump not found. Using alternative backup method..."
    cp -r src/logs $BACKUP_DIR/logs_$DATE
    tar -czf $BACKUP_DIR/logs_backup_$DATE.tar.gz $BACKUP_DIR/logs_$DATE
    rm -rf $BACKUP_DIR/logs_$DATE
fi

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è backup
cp .env $BACKUP_DIR/env_backup_$DATE
cp package.json $BACKUP_DIR/package_backup_$DATE

echo "Backup completed: $DATE"
EOF
    
    chmod +x scripts/backup.sh
    
    log "‚úÖ Backup –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    echo -e "${BLUE}"
    echo "üöÄ Crypto Telegram Bot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è"
    echo "=================================================="
    echo -e "${NC}"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    case ${1:-"deploy"} in
        "install")
            check_system
            install_dependencies
            setup_config
            ;;
        "test")
            run_tests
            ;;
        "deploy")
            check_system
            install_dependencies
            setup_config
            run_tests
            deploy_production
            setup_monitoring
            setup_backup
            ;;
        "monitoring")
            setup_monitoring
            ;;
        "backup")
            setup_backup
            ;;
        "health")
            node scripts/health-check.js
            ;;
        *)
            echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [install|test|deploy|monitoring|backup|health]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥–∏:"
            echo "  install    - –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"
            echo "  test       - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤"
            echo "  deploy     - –ü–æ–≤–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)"
            echo "  monitoring - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"
            echo "  backup     - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è backup"
            echo "  health     - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏"
            exit 1
            ;;
    esac
    
    log "üéâ –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!"
    
    if [ "${1:-"deploy"}" == "deploy" ]; then
        echo ""
        echo -e "${GREEN}–í–∞—à Crypto Telegram Bot —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ!${NC}"
        echo ""
        echo "–ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
        echo "  pm2 status          - –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—ñ–≤"
        echo "  pm2 logs crypto-bot - –õ–æ–≥–∏ –±–æ—Ç–∞"
        echo "  pm2 monit           - –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"
        echo "  ./scripts/backup.sh - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup"
        echo "  node scripts/health-check.js - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è"
        echo ""
        echo "–õ–æ–≥–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤: src/logs/"
        echo "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è PM2: ecosystem.config.js"
    fi
}

# –ó–∞–ø—É—Å–∫
main "$@"
