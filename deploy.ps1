# üöÄ Crypto Telegram Bot - PowerShell Deployment Script

param(
    [Parameter(Position=0)]
    [ValidateSet("install", "test", "deploy", "monitoring", "backup", "health")]
    [string]$Action = "deploy"
)

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏
function Write-Log {
    param([string]$Message)
    Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] WARNING: $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] ERROR: $Message" -ForegroundColor Red
    exit 1
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏
function Test-System {
    Write-Log "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js
    try {
        $nodeVersion = node --version
        $versionNumber = [int]($nodeVersion -replace 'v(\d+)\..*', '$1')
        if ($versionNumber -lt 18) {
            Write-Error "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –≤–µ—Ä—Å—ñ—è Node.js 18+. –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: $nodeVersion"
        }
    }
    catch {
        Write-Error "Node.js –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Node.js 18+ LTS –∑ https://nodejs.org/"
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm
    try {
        npm --version | Out-Null
    }
    catch {
        Write-Error "npm –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PM2
    try {
        pm2 --version | Out-Null
    }
    catch {
        Write-Log "–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ PM2..."
        npm install -g pm2
    }
    
    Write-Log "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ"
}

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
function Install-Dependencies {
    Write-Log "–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ..."
    
    if (Test-Path "package-lock.json") {
        npm ci --only=production
    } else {
        npm install --only=production
    }
    
    if ($LASTEXITCODE -ne 0) {
        Write-Error "–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"
    }
    
    Write-Log "‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
}

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
function Set-Configuration {
    Write-Log "–ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—É
    if (-not (Test-Path ".env")) {
        if (Test-Path "example.env") {
            Copy-Item "example.env" ".env"
            Write-Warning "–°—Ç–≤–æ—Ä–µ–Ω–æ .env —Ñ–∞–π–ª –∑ example.env. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è"
            Write-Host ""
            Write-Host "–†–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª:"
            Write-Host "notepad .env"
            Write-Host ""
            Write-Host "–û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:"
            Write-Host "- BOT_TOKEN=your_telegram_bot_token"
            Write-Host "- MONGO_URI=your_mongodb_connection_string"
            Write-Host ""
            Read-Host "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è .env —Ñ–∞–π–ª—É"
        } else {
            Write-Error ".env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞ example.env –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
        }
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    $envContent = Get-Content ".env" -Raw
    if (-not ($envContent -match "BOT_TOKEN=") -or -not ($envContent -match "MONGO_URI=")) {
        Write-Error "–û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ BOT_TOKEN —Ç–∞ MONGO_URI –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –≤ .env"
    }
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–æ–∫
    @("src\logs", "backup", "scripts") | ForEach-Object {
        if (-not (Test-Path $_)) {
            New-Item -ItemType Directory -Path $_ -Force | Out-Null
        }
    }
    
    Write-Log "‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
}

# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
function Invoke-Tests {
    Write-Log "–ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
    if (Test-Path "package.json") {
        try {
            npm run test 2>$null
        }
        catch {
            Write-Warning "–¢–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ –∞–±–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ"
        }
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ JSON —Ñ–∞–π–ª—ñ–≤
    if (Test-Path "translate.json") {
        try {
            node -e "JSON.parse(require('fs').readFileSync('translate.json', 'utf8'))"
        }
        catch {
            Write-Error "translate.json –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫–∏"
        }
    }
    
    Write-Log "‚úÖ –¢–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ
function Deploy-Production {
    Write-Log "–†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ..."
    
    # –ó—É–ø–∏–Ω–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
    @("crypto-bot", "crypto-worker") | ForEach-Object {
        pm2 stop $_ 2>$null
        pm2 delete $_ 2>$null
    }
    
    # –ó–∞–ø—É—Å–∫ –∑ PM2
    if (Test-Path "ecosystem.config.js") {
        pm2 start ecosystem.config.js
    } else {
        pm2 start src/bot.js --name crypto-bot
        pm2 start src/worker.js --name crypto-worker
    }
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó PM2
    pm2 save
    
    Write-Log "‚úÖ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
function Set-Monitoring {
    Write-Log "–ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥..."
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è PM2 –ø–ª–∞–≥—ñ–Ω—ñ–≤
    pm2 install pm2-logrotate
    pm2 set pm2-logrotate:max_size 10M
    pm2 set pm2-logrotate:retain 30
    pm2 set pm2-logrotate:compress true
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ health check
    $healthCheckScript = @"
const axios = require('axios');
const fs = require('fs');

async function healthCheck() {
    const results = [];
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram API
    try {
        const response = await axios.get(`https://api.telegram.org/bot`+process.env.BOT_TOKEN+`/getMe`);
        results.push({ service: 'Telegram', status: 'OK' });
    } catch (error) {
        results.push({ service: 'Telegram', status: 'ERROR', error: error.message });
    }
    
    console.log(JSON.stringify(results, null, 2));
    fs.writeFileSync('health-check.json', JSON.stringify(results, null, 2));
    
    return results.every(r => r.status === 'OK');
}

healthCheck().then(success => {
    process.exit(success ? 0 : 1);
}).catch(error => {
    console.error('Health check failed:', error);
    process.exit(1);
});
"@
    
    Set-Content -Path "scripts\health-check.js" -Value $healthCheckScript -Encoding UTF8
    
    Write-Log "‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup —Å–∫—Ä–∏–ø—Ç–∞
function Set-Backup {
    Write-Log "–ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ backup..."
    
    $backupScript = @"
`$date = Get-Date -Format "yyyyMMdd_HHmmss"
`$backupDir = "backup"
`$dbName = "crypto_bot"

if (-not (Test-Path `$backupDir)) {
    New-Item -ItemType Directory -Path `$backupDir -Force | Out-Null
}

Write-Host "Backup configuration..."
Copy-Item ".env" "`$backupDir\env_backup_`$date"
Copy-Item "package.json" "`$backupDir\package_backup_`$date"

Write-Host "Backup logs..."
if (Test-Path "src\logs") {
    Copy-Item "src\logs" "`$backupDir\logs_`$date" -Recurse
}

Write-Host "Backup completed: `$date"
"@
    
    Set-Content -Path "scripts\backup.ps1" -Value $backupScript -Encoding UTF8
    
    Write-Log "‚úÖ Backup –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
function Main {
    Write-Host ""
    Write-Host "üöÄ Crypto Telegram Bot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è" -ForegroundColor Blue
    Write-Host "==================================================" -ForegroundColor Blue
    Write-Host ""
    
    switch ($Action) {
        "install" {
            Test-System
            Install-Dependencies
            Set-Configuration
        }
        "test" {
            Invoke-Tests
        }
        "deploy" {
            Test-System
            Install-Dependencies
            Set-Configuration
            Invoke-Tests
            Deploy-Production
            Set-Monitoring
            Set-Backup
        }
        "monitoring" {
            Set-Monitoring
        }
        "backup" {
            Set-Backup
        }
        "health" {
            node scripts\health-check.js
        }
    }
    
    Write-Log "üéâ –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!"
    
    if ($Action -eq "deploy") {
        Write-Host ""
        Write-Host "–í–∞—à Crypto Telegram Bot —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ!" -ForegroundColor Green
        Write-Host ""
        Write-Host "–ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
        Write-Host "  pm2 status          - –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—ñ–≤"
        Write-Host "  pm2 logs crypto-bot - –õ–æ–≥–∏ –±–æ—Ç–∞"
        Write-Host "  pm2 monit           - –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"
        Write-Host "  .\scripts\backup.ps1 - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup"
        Write-Host "  node scripts\health-check.js - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è"
        Write-Host ""
        Write-Host "–õ–æ–≥–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤: src\logs\"
        Write-Host "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è PM2: ecosystem.config.js"
    }
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
try {
    Main
}
catch {
    Write-Error "–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: $($_.Exception.Message)"
}
